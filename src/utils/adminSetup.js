// ÁÆ°ÁêÜÂëòËÆæÁΩÆÂ∑•ÂÖ∑
// Ê≥®ÊÑèÔºöÊ≠§Êñá‰ª∂‰ªÖÁî®‰∫éÂºÄÂèëÊµãËØïÔºåÁîü‰∫ßÁéØÂ¢ÉËØ∑ÈÄöËøáLeanCloudÊéßÂà∂Âè∞ËÆæÁΩÆ

import { AV, initLeanCloud } from '../leancloud/config';

/**
 * ËÆæÁΩÆÂΩìÂâçÁî®Êà∑‰∏∫ÁÆ°ÁêÜÂëò
 * @param {string} username Áî®Êà∑Âêç
 * @param {string} password ÂØÜÁ†Å
 */
export const setupAdmin = async (username, password) => {
  try {
    // ÂàùÂßãÂåñLeanCloud
    initLeanCloud();
    
    // ÁôªÂΩïÁî®Êà∑
    const user = await AV.User.logIn(username, password);
    console.log('‚úÖ Áî®Êà∑ÁôªÂΩïÊàêÂäü:', user.get('username'));
    
    // ËÆæÁΩÆÁÆ°ÁêÜÂëòÊùÉÈôê
    user.set('role', 'admin');
    await user.save();
    
    console.log('‚úÖ ÁÆ°ÁêÜÂëòÊùÉÈôêËÆæÁΩÆÊàêÂäüÔºÅ');
    console.log('Áî®Êà∑‰ø°ÊÅØ:', {
      id: user.id,
      username: user.get('username'),
      role: user.get('role'),
      email: user.get('email')
    });
    
    return user;
  } catch (error) {
    console.error('‚ùå ËÆæÁΩÆÁÆ°ÁêÜÂëòÂ§±Ë¥•:', error);
    throw error;
  }
};

/**
 * Ê£ÄÊü•Áî®Êà∑ÊòØÂê¶‰∏∫ÁÆ°ÁêÜÂëò
 * @param {AV.User} user Áî®Êà∑ÂØπË±°
 * @returns {boolean}
 */
export const isAdmin = (user) => {
  if (!user) return false;
  const role = user.get('role');
  return role === 'admin';
};

/**
 * Ëé∑ÂèñÊâÄÊúâÁî®Êà∑ÂàóË°®Ôºà‰ªÖÁÆ°ÁêÜÂëòÂèØÁî®Ôºâ
 */
export const getAllUsers = async () => {
  try {
    const currentUser = AV.User.current();
    if (!isAdmin(currentUser)) {
      throw new Error('ÊùÉÈôê‰∏çË∂≥ÔºöÈúÄË¶ÅÁÆ°ÁêÜÂëòÊùÉÈôê');
    }
    
    const query = new AV.Query('_User');
    query.ascending('createdAt');
    const users = await query.find();
    
    return users.map(user => ({
      id: user.id,
      username: user.get('username'),
      email: user.get('email') || '',
      role: user.get('role') || 'user',
      createdAt: user.get('createdAt')
    }));
  } catch (error) {
    console.error('Ëé∑ÂèñÁî®Êà∑ÂàóË°®Â§±Ë¥•:', error);
    throw error;
  }
};

/**
 * ÊâπÈáèËÆæÁΩÆÁî®Êà∑ËßíËâ≤
 * @param {string} userId Áî®Êà∑ID
 * @param {string} role ËßíËâ≤ ('admin' | 'user')
 */
export const setUserRole = async (userId, role) => {
  try {
    const currentUser = AV.User.current();
    if (!isAdmin(currentUser)) {
      throw new Error('ÊùÉÈôê‰∏çË∂≥ÔºöÈúÄË¶ÅÁÆ°ÁêÜÂëòÊùÉÈôê');
    }
    
    if (!['admin', 'user'].includes(role)) {
      throw new Error('Êó†ÊïàÁöÑËßíËâ≤ÂÄºÔºåÂè™ËÉΩÊòØ admin Êàñ user');
    }
    
    const user = AV.Object.createWithoutData('_User', userId);
    user.set('role', role);
    await user.save();
    
    console.log(`‚úÖ Áî®Êà∑ËßíËâ≤ËÆæÁΩÆÊàêÂäü: ${userId} -> ${role}`);
    return true;
  } catch (error) {
    console.error('ËÆæÁΩÆÁî®Êà∑ËßíËâ≤Â§±Ë¥•:', error);
    throw error;
  }
};

// ‰ΩøÁî®Á§∫‰æãÔºö
// 1. Âú®ÊµèËßàÂô®ÊéßÂà∂Âè∞‰∏≠ËøêË°åÔºö
// import('./src/utils/adminSetup.js').then(module => {
//   const { setupAdmin } = module;
//   setupAdmin('‰Ω†ÁöÑÁî®Êà∑Âêç', '‰Ω†ÁöÑÂØÜÁ†Å');
// });

// 2. ÊàñËÄÖÂàõÂª∫‰∏Ä‰∏™ÊµãËØïÊåâÈíÆÔºà‰ªÖÂºÄÂèëÁéØÂ¢É‰ΩøÁî®Ôºâ
export const createAdminTestButton = () => {
  if (process.env.NODE_ENV === 'development') {
    const button = document.createElement('button');
    button.textContent = 'üîß ËÆæÁΩÆÁÆ°ÁêÜÂëòÔºàÂºÄÂèëÊµãËØïÔºâ';
    button.style.cssText = `
      position: fixed;
      top: 20px;
      right: 20px;
      z-index: 9999;
      padding: 10px 15px;
      background: #ff6b6b;
      color: white;
      border: none;
      border-radius: 5px;
      cursor: pointer;
      font-size: 12px;
      box-shadow: 0 2px 8px rgba(0,0,0,0.2);
    `;
    
    button.onclick = () => {
      showAdminSetupModal();
    };
    
    document.body.appendChild(button);
  }
};

/**
 * ÊòæÁ§∫ÁÆ°ÁêÜÂëòËÆæÁΩÆÊ®°ÊÄÅÊ°Ü
 */
function showAdminSetupModal() {
  // ÂàõÂª∫Ê®°ÊÄÅÊ°Ü
  const modal = document.createElement('div');
  modal.style.cssText = `
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0, 0, 0, 0.5);
    z-index: 10000;
    display: flex;
    align-items: center;
    justify-content: center;
  `;
  
  // ÂàõÂª∫Ê®°ÊÄÅÊ°ÜÂÜÖÂÆπ
  const modalContent = document.createElement('div');
  modalContent.style.cssText = `
    background: white;
    border-radius: 12px;
    padding: 24px;
    width: 90%;
    max-width: 400px;
    box-shadow: 0 20px 40px rgba(0, 0, 0, 0.3);
  `;
  
  // Ê†áÈ¢ò
  const title = document.createElement('h3');
  title.textContent = 'üîß ËÆæÁΩÆÁÆ°ÁêÜÂëòÊùÉÈôê';
  title.style.cssText = `
    margin: 0 0 20px 0;
    color: #333;
    font-size: 18px;
    text-align: center;
  `;
  
  // Áî®Êà∑ÂêçËæìÂÖ•Ê°Ü
  const usernameLabel = document.createElement('label');
  usernameLabel.textContent = 'Áî®Êà∑Âêç:';
  usernameLabel.style.cssText = `
    display: block;
    margin-bottom: 8px;
    font-weight: 500;
    color: #555;
  `;
  
  const usernameInput = document.createElement('input');
  usernameInput.type = 'text';
  usernameInput.placeholder = 'ËØ∑ËæìÂÖ•Áî®Êà∑Âêç';
  usernameInput.style.cssText = `
    width: 100%;
    padding: 12px;
    border: 2px solid #e1e5e9;
    border-radius: 8px;
    font-size: 14px;
    margin-bottom: 16px;
    box-sizing: border-box;
    outline: none;
    transition: border-color 0.2s;
  `;
  
  // ÂØÜÁ†ÅËæìÂÖ•Ê°Ü
  const passwordLabel = document.createElement('label');
  passwordLabel.textContent = 'ÂØÜÁ†Å:';
  passwordLabel.style.cssText = `
    display: block;
    margin-bottom: 8px;
    font-weight: 500;
    color: #555;
  `;
  
  const passwordInput = document.createElement('input');
  passwordInput.type = 'password';
  passwordInput.placeholder = 'ËØ∑ËæìÂÖ•ÂØÜÁ†Å';
  passwordInput.style.cssText = `
    width: 100%;
    padding: 12px;
    border: 2px solid #e1e5e9;
    border-radius: 8px;
    font-size: 14px;
    margin-bottom: 24px;
    box-sizing: border-box;
    outline: none;
    transition: border-color 0.2s;
  `;
  
  // ÊåâÈíÆÂÆπÂô®
  const buttonContainer = document.createElement('div');
  buttonContainer.style.cssText = `
    display: flex;
    gap: 12px;
    justify-content: flex-end;
  `;
  
  // ÂèñÊ∂àÊåâÈíÆ
  const cancelButton = document.createElement('button');
  cancelButton.textContent = 'ÂèñÊ∂à';
  cancelButton.style.cssText = `
    padding: 10px 20px;
    background: #f3f4f6;
    color: #374151;
    border: none;
    border-radius: 8px;
    font-size: 14px;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.2s ease;
  `;
  
  // Á°ÆËÆ§ÊåâÈíÆ
  const confirmButton = document.createElement('button');
  confirmButton.textContent = 'ËÆæÁΩÆÁÆ°ÁêÜÂëò';
  confirmButton.style.cssText = `
    padding: 10px 20px;
    background: #ff6b6b;
    color: white;
    border: none;
    border-radius: 8px;
    font-size: 14px;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.2s ease;
  `;
  
  // Áä∂ÊÄÅÊèêÁ§∫
  const statusDiv = document.createElement('div');
  statusDiv.style.cssText = `
    margin-top: 16px;
    padding: 12px;
    border-radius: 8px;
    font-size: 14px;
    text-align: center;
    display: none;
  `;
  
  // ËæìÂÖ•Ê°ÜÁÑ¶ÁÇπÊïàÊûú
  [usernameInput, passwordInput].forEach(input => {
    input.addEventListener('focus', () => {
      input.style.borderColor = '#ff6b6b';
    });
    input.addEventListener('blur', () => {
      input.style.borderColor = '#e1e5e9';
    });
  });
  
  // ÊåâÈíÆÊÇ¨ÂÅúÊïàÊûú
  [cancelButton, confirmButton].forEach(btn => {
    btn.addEventListener('mouseenter', () => {
      if (btn === cancelButton) {
        btn.style.background = '#e5e7eb';
      } else {
        btn.style.background = '#ff5252';
      }
    });
    btn.addEventListener('mouseleave', () => {
      if (btn === cancelButton) {
        btn.style.background = '#f3f4f6';
      } else {
        btn.style.background = '#ff6b6b';
      }
    });
  });
  
  // ÂèñÊ∂àÊåâÈíÆ‰∫ã‰ª∂
  cancelButton.onclick = () => {
    document.body.removeChild(modal);
  };
  
  // Á°ÆËÆ§ÊåâÈíÆ‰∫ã‰ª∂
  confirmButton.onclick = async () => {
    const username = usernameInput.value.trim();
    const password = passwordInput.value.trim();
    
    if (!username || !password) {
      showStatus('ËØ∑ËæìÂÖ•Áî®Êà∑ÂêçÂíåÂØÜÁ†Å', 'error');
      return;
    }
    
    // Á¶ÅÁî®ÊåâÈíÆÂíåËæìÂÖ•Ê°Ü
    confirmButton.disabled = true;
    confirmButton.textContent = 'ËÆæÁΩÆ‰∏≠...';
    usernameInput.disabled = true;
    passwordInput.disabled = true;
    
    try {
      await setupAdmin(username, password);
      showStatus('‚úÖ ÁÆ°ÁêÜÂëòÊùÉÈôêËÆæÁΩÆÊàêÂäüÔºÅ', 'success');
      
      // Âª∂ËøüÂÖ≥Èó≠Ê®°ÊÄÅÊ°Ü
      setTimeout(() => {
        document.body.removeChild(modal);
      }, 2000);
    } catch (error) {
      showStatus(`‚ùå ËÆæÁΩÆÂ§±Ë¥•: ${error.message}`, 'error');
      
      // ÈáçÊñ∞ÂêØÁî®ÊåâÈíÆÂíåËæìÂÖ•Ê°Ü
      confirmButton.disabled = false;
      confirmButton.textContent = 'ËÆæÁΩÆÁÆ°ÁêÜÂëò';
      usernameInput.disabled = false;
      passwordInput.disabled = false;
    }
  };
  
  // ÊòæÁ§∫Áä∂ÊÄÅ‰ø°ÊÅØ
  function showStatus(message, type) {
    statusDiv.textContent = message;
    statusDiv.style.display = 'block';
    
    if (type === 'success') {
      statusDiv.style.background = '#d1fae5';
      statusDiv.style.color = '#065f46';
      statusDiv.style.border = '1px solid #a7f3d0';
    } else {
      statusDiv.style.background = '#fee2e2';
      statusDiv.style.color = '#991b1b';
      statusDiv.style.border = '1px solid #fca5a5';
    }
  }
  
  // ÂõûËΩ¶ÈîÆÊèê‰∫§
  [usernameInput, passwordInput].forEach(input => {
    input.addEventListener('keypress', (e) => {
      if (e.key === 'Enter') {
        confirmButton.click();
      }
    });
  });
  
  // ÁªÑË£ÖÊ®°ÊÄÅÊ°Ü
  buttonContainer.appendChild(cancelButton);
  buttonContainer.appendChild(confirmButton);
  
  modalContent.appendChild(title);
  modalContent.appendChild(usernameLabel);
  modalContent.appendChild(usernameInput);
  modalContent.appendChild(passwordLabel);
  modalContent.appendChild(passwordInput);
  modalContent.appendChild(buttonContainer);
  modalContent.appendChild(statusDiv);
  
  modal.appendChild(modalContent);
  document.body.appendChild(modal);
  
  // Ëá™Âä®ËÅöÁÑ¶Áî®Êà∑ÂêçËæìÂÖ•Ê°Ü
  usernameInput.focus();
} 